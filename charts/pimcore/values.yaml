replicaCount: 1

nameOverride: ""
fullnameOverride: ""

pimcore:
  tag: main
  appEnv: dev
  appSecret: ChangeMe123!
  databaseURL: mysql://pimcore:pimcore@mysql-mariadb.pimcore.svc.cluster.local:3306/app?serverVersion=5.7
  redisServer: redis-master.pimcore.svc.cluster.local
  redisPassword: ChangeMe123

  # composer create-project pimcore/demo
  # composer create-project pimcore/skeleton
  # Note: update customConfigFiles below if you change the project type
  createProject: pimcore/skeleton

  username: admin
  password: ChangeMe123!

  db:
    name: pimcore
    host: mysql-mariadb.pimcore.svc.cluster.local
    port: 3306
    username: pimcore
    password: ChangeMe123!

  customConfigFiles:
    config-yaml:
      enabled: false
      localPath: "pimcore-config/skeleton/config.yaml"
      containerPath: config/config.yaml
    bundles-php:
      enabled: false
      localPath: "pimcore-config/skeleton/bundles.php"
      containerPath: config/bundles.php

  customEnvVars: [] # [{ name: "CUSTOM_VAR", value: "custom-value" }, ...]

php:
  imagePullSecrets: []
  image:
    pullPolicy: Always
    # defaults to official pimcore PHP image(s), see:
    # - https://hub.docker.com/r/pimcore/pimcore/tags
    # - https://github.com/pimcore/docker
    # It's based on Debian
    registry: pimcore/pimcore
    tag: php8.2-latest
  replicas: 1
  service:
    type: ClusterIP
    port: 9000
  # user and group for the PHP-FPM and installation/maintenance jobs
  # this user must also exist in the PHP-FPM image
  phpUser:
    userName: www-data
    uid: 33
    groupName: www-data
    gid: 33
  fpmPool:
    pm: dynamic
    pmMaxChildren: 100
    pmStartServers: 3
    pmMinSpareServers: 3
    pmMaxSpareServers: 8
    pmMaxRequests: 10000
    pmProcessIdleTimeout: 10s
  resources:
    requests:
      cpu: 4
      memory: 8Gi
      ephemeral-storage: 5Gi
    limits:
      cpu: 4
      memory: 8Gi
      ephemeral-storage: 5Gi
  ini:
    # pimcore/pimcore image defaults
    #
    # phpMemoryLimit: 512M
    # phpMaxExecutionTime: 30
    # phpErrorReporting: E_ALL
    # phpDisplayErrors: ""
    # phpDisplayStartupErrors: 1
    # phpPostMaxSize: 100M
    # phpUploadMaxFilesize: 100M
    # opcacheEnable: 1
    # opcacheEnableCli: 0
    # opcacheMemoryConsumption: 128
    # opcacheMaxAcceleratedFiles: 10000
    # opcacheValidateTimestamps: 1
    # opcacheConsistencyChecks: 0
    #
    pimcore:
      phpMemoryLimit: 512M  # e.g. create very large GraphQL JSON responses can exceed 256M
      phpMaxExecutionTime: 300
      phpErrorReporting: E_ALL
      phpDisplayErrors: "Off"
      phpDisplayStartupErrors: 1
      phpPostMaxSize: 100M
      phpUploadMaxFilesize: 100M
      opcacheEnable: 1
      opcacheEnableCli: 0
      opcacheMemoryConsumption: 512
      opcacheMaxAcceleratedFiles: 10000
      opcacheValidateTimestamps: 1
      opcacheConsistencyChecks: 0
    maintenance:
      # if not set, use pimcore values
      cronjob:
        phpMemoryLimit: 512M
        phpMaxExecutionTime: 0
      worker:
        phpMemoryLimit: 512M
        phpMaxExecutionTime: 0
      shell:
        phpMemoryLimit: 0
        phpMaxExecutionTime: 0
    installation:
      # for installation hooks (install, initialize, migrate)
      # if not set, use pimcore values
      phpMemoryLimit: 512M
      phpMaxExecutionTime: 0

nginx:
  imagePullSecrets: []
  image:
    pullPolicy: Always
    # Oficial Nginx images, does not support Brotli compression
    # registry: nginx
    # tag: 1.27.2-alpine3.20
    # Custom Nginx image automatically built from the official Nginx image + Brotli support
    registry: georgjung/nginx-brotli
    tag: 1.27.2-alpine3.20
  compression:
    enabled: true
    gzip:
      enabled: true
      min_length: 1000
      comp_level: 1
      types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript"
    brotli:
      enabled: true
      comp_level: 6
      types: "text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript"
  replicas: 1
  tag: master
  service:
    type: ClusterIP
    port: 80
  annotations:
    "cloud.google.com/neg": '{"ingress": true}'
  backendConfig:
    # GKE Ingress backend config
    enabled: true
    timeoutSec: 300
    healthCheck:
      checkIntervalSec: 30
      timeoutSec: 30
      healthyThreshold: 2
      unhealthyThreshold: 2
      requestPath: "/admin/login"
      type: HTTP
      port: 80
  resources:
    requests:
      cpu: 500m
      memory: 512Mi
      ephemeral-storage: 256Mi
    limits:
      cpu: 500m
      memory: 512Mi
      ephemeral-storage: 256Mi
  clientMaxBodySize: 100m
  sharedFolders:
    - public
    # bundles assets
    - vendor

installation:
  resources:
    requests:
      cpu: 1
      memory: 1Gi
      ephemeral-storage: 1Gi
    limits:
      cpu: 1
      memory: 1Gi
      ephemeral-storage: 1Gi

maintenance:
  cronjob:
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
        ephemeral-storage: 3Gi
      limits:
        cpu: 500m
        memory: 1Gi
        ephemeral-storage: 3Gi
  worker:
    replicas: 1
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
        ephemeral-storage: 3Gi
      limits:
        cpu: 500m
        memory: 1Gi
        ephemeral-storage: 3Gi
  shell:
    replicas: 0
    resources:
      requests:
        cpu: 1
        memory: 2Gi
        ephemeral-storage: 3Gi
      limits:
        cpu: 1
        memory: 2Gi
        ephemeral-storage: 3Gi
    maintainer:
      userName: maintainer
      userId: 1000
      groupName: developers
      groupId: 1200
    installPackages: ranger vim procps
    entrypointAdditionalCommands: |
      apt-get install -y git
      su - maintainer -c "
        git config --global --add safe.directory /var/www/pimcore;
        git config --global user.name 'Pimcore Maintainer';
        git config --global user.email 'maintainer@example.com';
      "
  mysqlBackup:
    enabled: false
    imagePullSecrets: []
    image:
      pullPolicy: Always
      registry: mariadb
      tag: 10.5
    replicas: 1
    resources:
      requests:
        cpu: 500m
        memory: 1Gi
        ephemeral-storage: 2Gi
      limits:
        cpu: 500m
        memory: 1Gi
        ephemeral-storage: 2Gi

pvc:
  data:
    ## @param pvc.data.existingClaim Name of an existing `PersistentVolumeClaim`
    ## for Pimcore installation and data
    ## NOTE: When it's set the rest of the `pvc.data.*` apart from `pvc.data.subPath`
    ## are ignored
    ##
    existingClaim: ""  # if set other pvc.data.* are ignored
    ## @param pvc.data.subPath SubPath within the volume to mount as /var/www/pimcore
    ##
    subPath: pimcore
    name: data
    storage: 10Gi
    accessMode: ReadWriteMany
    storageClass: ""
  mysqlBackup:
    ## @param pvc.mysql-backup.existingClaim Name of an existing `PersistentVolumeClaim`
    ## for MySQL backups
    ## NOTE: When it's set the rest of the `pvc.mysql-backup.*` apart from `pvc.mysql-backup.subPath`
    ## are ignored
    ##
    existingClaim: ""  # if set other pvc.mysql-backup.* are ignored
    ## @param pvc.mysql-backup.subPath SubPath within the volume to mount as /var/www/pimcore
    ##
    subPath: pimcore-mysql-backup
    name: mysql-backup
    storage: 10Gi
    accessMode: ReadWriteOnce
    storageClass: ""

serviceAccount:
  create: true
  annotations: { }
  name: ""

podAnnotations: { }

podSecurityContext: { }

securityContext: { }

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: { }

tolerations:
  nginx:
  php:
  maintenance:

affinity: { }
